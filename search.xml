<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2023/03/03/test/</url>
    <content><![CDATA[
测试测试

<!-- more -->

# 测试1

## 测试2

# 测试1

更新 2023-03-03 17:06

更新啦！！！
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>test2</title>
    <url>/2023/03/03/test2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>test1</title>
    <url>/2023/03/03/test1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>还是测试</title>
    <url>/2023/03/04/bot/</url>
    <content><![CDATA[
测试测试测试

test

test

Test

<!-- more -->

## 购买一个云服务器

[点击查看教程](https://blog.csdn.net/u014148630/article/details/100536745?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167180113416800213095525%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=167180113416800213095525&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-9-100536745-null-null.142^v68^wechat_v2,201^v4^add_ask,213^v2^t3_esquery_v2&utm_term=%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1018.2226.3001.4187)

## python环境的配置

因为使用的相关库python-telegram-bot只支持python3.7/3.8/3.9，如果服务器没有python3或者版本不是这三个，那么先卸载python3，再选择一个版本安装，这里我们选择python3.9。

[点击查看教程](https://blog.csdn.net/qq_28770757/article/details/109684720)

**注意：如果make时报错 Could not import runpy module ，则需要重新解压然后在./configure之前修改配置文件（[参考链接](https://blog.51cto.com/u_15127605/4365898)）**

在指定目录，检查配置环境前，先进入解压后的目录

```shell
vim configure
```

删除enable_optimizations

然后执行配置检查，编译安装

```shell
./configure --prefix=/opt/python396

make && make install
```

接着是安装相关库

```shell
pip install python-telegram-bot --pre
```

该库相关操作请参考GitHub上的说明（[点击查看](https://github.com/python-telegram-bot/python-telegram-bot)）

## 使用clash作为代理

从以下教程中选择一个即可，我选择的是第一个教程：

[点击查看教程1](https://www.ahdark.com/som/1643.shtml)

[点击查看教程2](https://maintao.com/2021/use-clash-as-a-proxy/)

[点击查看教程3](https://juejin.cn/post/7054941050216906760)

**通过VPN订阅链接获取yaml文件的方法：订阅链接+&flag==clash**

## 服务器后台运行.py文件

[点击查看教程](https://www.cnblogs.com/baby123/p/6477429.html)

## 申请一个bot

[点击查看教程](https://blog.csdn.net/whatday/article/details/113747294?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167180323716800180646039%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=167180323716800180646039&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-14-113747294-null-null.blog_rank_default&utm_term=telegram%20bot&spm=1018.2226.3001.4450)

## 测试test.py文件

源码如下，这是一个自动重复你发送消息的机器人，只需将第67行的token改为你的机器人token即可

{% note info no-icon telegrambot.py %}
{% code %}

#!/usr/bin/env python

# pylint: disable=unused-argument, wrong-import-position

# This program is dedicated to the public domainunder the CC0 license.

"""
Simple Bot to reply to Telegram messages.

First, a few handler functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging

from telegram import __version__ as TG_VER

try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )
from telegram import ForceReply, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# Enable logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and

# context.

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    await update.message.reply_html(
        rf"Hi {user.mention_html()}!",
        reply_markup=ForceReply(selective=True),
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text("Help!")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Echo the user message."""
    await update.message.reply_text(update.message.text)


def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
​    TOKEN = 'your token'
​    proxy_url = 'http://127.0.0.1:7890'
​    application = Application.builder().token(TOKEN).proxy_url(proxy_url).build()

    # on different commands - answer in Telegram
​    application.add_handler(CommandHandler("start", start))
​    application.add_handler(CommandHandler("help", help_command))
​    
​    # on non command i.e message - echo the message on Telegram
​    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
​    
​    # Run the bot until the user presses Ctrl-C
​    application.run_polling()


if __name__ == "__main__":
    main()
    
    

{% endcode %}
{% endnote %}

运行结果如下：

![1](1.jpeg)

教程到这里就结束了，快开始你的机器人之旅吧～





$$
\begin{equation*}\label{eq20}
e=mc^2
\end{equation*}
$$



$$
\begin{equation}\label{eq30}\tag{i}
e=mc^2
\end{equation}
$$

著名的质能方程 $\eqref{eq30}$ 由爱因斯坦提出 ...



{% note info no-icon This is a summary %}
{% code %}
code block in note tag
code block in note tag
code block in note tag
{% endcode %}
{% endnote %}

  

  

]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>archives</title>
    <url>/archives/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>友链页面</title>
    <url>/links/index.html</url>
    <content><![CDATA[


{% linkgrid %}
吕金昂的通信小屋 | https://lvjang.cn | 欢迎来到小屋！这里将分享一些通信专业的知识、资源和站主的日常。| https://lvjang.cn/wp-content/uploads/2023/03/lvjang-主LOGO-600x600-1.jpg

{% endlinkgrid %}

----

<div style="text-align:center;">
   <span class="with-love" id="animate1"> <i class="fa fa-heart"></i> </span>发邮件添加友链<span class="with-love" id="animate2"> <i class="fa fa-heart"></i> </span> 
</div>
<center><font color='gray' size='2'>maihm6@163.com</font></center>


-----

{% note success %}

## 友链申请要求

1. 内容持续更新且可以稳定访问；
2. 页面整洁无广告；

{% endnote %}

{% note info no-icon %}

## 友链格式

- 网站名称：喜欢紫霞
- 网站地址：https://maihm6.com
- 网站描述：唯有热爱可抵岁月漫长。
- 网站标志：https://maihm6.com/images/apple-touch-icon-next.png

{% endnote %}
]]></content>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/about/index.html</url>
    <content><![CDATA[
更新于 2023-06-02 01:23

你好，我是 Huaming，下面是关于我的一些介绍：

- 一名准研究生，平时喜欢唱、跳、Rap和篮球。

下面是关于这篇博客的一些介绍：

- 这个博客是我记录生活的场所，会在这里分享一些日常琐事、学习心得和人生感悟等。
- 这个博客目前还出在测试阶段，博主也正在学习hexo+next的相关操作中。

## 网络分身

如果你想要网络上的其他平台找到我，有下面这些方式：👇

<table style="text-align:center">
  <tr>
    <th width=50%>平台</th>
    <th>账号</th>
  </tr>
  <tr>
    <td>常用邮箱📫</td>
    <td><a href="mailto:maihm6@163.com">maihm6@163.com</a></td>
  </tr>
  <tr>
    <td>Github💻</td>
    <td><a hrel='https://github.com.maihm6'>maihm6</a></td>
  </tr>
</table>
]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
</search>
