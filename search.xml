<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test2</title>
    <url>/2023/03/03/test2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>日常生活</category>
      </categories>
  </entry>
  <entry>
    <title>test1</title>
    <url>/2023/03/03/test1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>如何创建一个属于自己的Telegram Bot›</title>
    <url>/2023/03/04/bot/</url>
    <content><![CDATA[
Telegram bot是telegram上区别于WeChat的一个重要功能，其自由度高、功能强大。通过程序的设计，可以使得bot满足于各种需求，比如自动回复、线上点单和小游戏等。由于对于这项功能比较好奇，本人在毕设的关键时期还花了不少时间来研究bot的使用，用这篇文章记录从零到实现“Hello World”的全过程。

<!-- more -->

## 购买一个云服务器

[点击查看教程](https://blog.csdn.net/u014148630/article/details/100536745?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167180113416800213095525%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=167180113416800213095525&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-9-100536745-null-null.142^v68^wechat_v2,201^v4^add_ask,213^v2^t3_esquery_v2&utm_term=%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1018.2226.3001.4187)

## python环境的配置

因为使用的相关库python-telegram-bot只支持python3.7/3.8/3.9，如果服务器没有python3或者版本不是这三个，那么先卸载python3，再选择一个版本安装，这里我们选择python3.9。

[点击查看教程](https://blog.csdn.net/qq_28770757/article/details/109684720)

**注意：如果make时报错 Could not import runpy module ，则需要重新解压然后在./configure之前修改配置文件（[参考链接](https://blog.51cto.com/u_15127605/4365898)）**

在指定目录，检查配置环境前，先进入解压后的目录

```shell
vim configure
```

删除enable_optimizations

然后执行配置检查，编译安装

```shell
./configure --prefix=/opt/python396

make && make install
```

接着是安装相关库

```shell
pip install python-telegram-bot --pre
```

该库相关操作请参考GitHub上的说明（[点击查看](https://github.com/python-telegram-bot/python-telegram-bot)）

## 使用clash作为代理

从以下教程中选择一个即可，我选择的是第一个教程：

[点击查看教程1](https://www.ahdark.com/som/1643.shtml)

[点击查看教程2](https://maintao.com/2021/use-clash-as-a-proxy/)

[点击查看教程3](https://juejin.cn/post/7054941050216906760)

**通过VPN订阅链接获取yaml文件的方法：订阅链接+&flag==clash**

## 服务器后台运行.py文件

[点击查看教程](https://www.cnblogs.com/baby123/p/6477429.html)

## 申请一个bot

[点击查看教程](https://blog.csdn.net/whatday/article/details/113747294?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167180323716800180646039%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=167180323716800180646039&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-14-113747294-null-null.blog_rank_default&utm_term=telegram%20bot&spm=1018.2226.3001.4450)

## 测试test.py文件

源码如下，这是一个自动重复你发送消息的机器人，只需将第67行的token改为你的机器人token即可

{% note info no-icon telegrambot.py %}
{% code %}

#!/usr/bin/env python

# pylint: disable=unused-argument, wrong-import-position

# This program is dedicated to the public domainunder the CC0 license.

"""
Simple Bot to reply to Telegram messages.

First, a few handler functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging

from telegram import __version__ as TG_VER

try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )
from telegram import ForceReply, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# Enable logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and

# context.

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    await update.message.reply_html(
        rf"Hi {user.mention_html()}!",
        reply_markup=ForceReply(selective=True),
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text("Help!")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Echo the user message."""
    await update.message.reply_text(update.message.text)


def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
​    TOKEN = 'your token'
​    proxy_url = 'http://127.0.0.1:7890'
​    application = Application.builder().token(TOKEN).proxy_url(proxy_url).build()

    # on different commands - answer in Telegram
​    application.add_handler(CommandHandler("start", start))
​    application.add_handler(CommandHandler("help", help_command))
​    
​    # on non command i.e message - echo the message on Telegram
​    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
​    
​    # Run the bot until the user presses Ctrl-C
​    application.run_polling()


if __name__ == "__main__":
    main()
    
    

{% endcode %}
{% endnote %}

运行结果如下：

![1](https://raw.githubusercontent.com/maihm6/Picture/main/Blog/1.jpeg)

教程到这里就结束了，快开始你的机器人之旅吧～

  

  

]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Telegram Bot</tag>
      </tags>
  </entry>
  <entry>
    <title>Two-Sum Protocol</title>
    <url>/2023/07/17/Two-Sum/</url>
    <content><![CDATA[
Two-Sum 协议是在最基本的多对一通信模型——两对一模型中利用量子纠缠资源来进行编码的方案，该方案相比于经典的方案达到了2倍的量子密集编码增益。同时，该协议还是N-Sum Box Abstraction中的最简单情况，为其提供了研究思路与方法。

<!-- more -->

## 协议内容

假设在一次通信中有三方，分别为Alice，Bob和Carol。其中，Alice和Bob为发送方，Carol为接收方，需要接收Alice和Bob数据的模和。Alice和Bob各自拥有一个量子比特$\mathcal{A}_1$和$\mathcal{A}_2$，其中两个量子比特的联合态处于最大纠缠态$|\Phi\rangle:=\frac{1}{\sqrt{2}}\sum_{i=0}^{1}|i\rangle\otimes|i\rangle$。那么Two-Sum Protocol由下面步骤给出[^1]：

步骤1：Alice和Bob分别对$\mathcal{A}_1$*和*$\mathcal{A}2$进行$W(a,b)$和$W(c,d)$操作。其中$a,b,c,d\in\mathbb{Z}_2$，$W(a,b)=\mathsf{X}^a\mathsf{Z}^b$。

$\mathsf{X},\mathsf{Z}$分别对应Pauli门操作
$$
\begin{equation}\mathsf{X}:=\sum_{i=0}^1|i+1\rangle\langle i|,\mathsf{Z}:=\sum_{i=0}^1(-1)^i|i\rangle\langle i|.\tag{1}\end{equation}
$$
步骤2：Alice和Bob分别将量子比特和发送给Carol

步骤3：Carol对接收到的量子系统进行投影值测量（PVM，Projection-Valued Measure），并得到测量结果$(e,f)$。

PVM测量的算符$\mathbf{M}_{\mathbb{Z}^2_2}$为
$$
\begin{aligned}&\mathbf{M}_{\mathbb{Z}_2^2}:=\{M_{(a,b)}\mid a,b\in\mathbb{Z}_2\},\\ \text{where}\ &\ M_{(a,b)}:=(\mathsf{I}\otimes\mathsf{W}(a,b))|\Phi\rangle\langle\Phi|(\mathsf{I}\otimes\mathsf{W}(a,b)^\dagger).
\end{aligned}
\tag{2}
\label{1}
$$
因为在其中一个量子比特上的操作可以转化到另一个量子比特上，即
$$
\begin{aligned}
(\mathsf{I}\otimes\mathsf{W}(a,b))|\Phi\rangle & =\left(\mathsf{W}(a,b)^{\top}\otimes\mathsf{I}\right)|\Phi\rangle   \\
&=\left(\mathsf{W}(a,b)^\dagger\otimes\mathsf{I}\right)|\Phi\rangle  \\
&=(-1)^{ab}(\mathsf{W}(a,b)\otimes\mathsf{I})|\Phi\rangle.
\end{aligned}\tag{3}
$$
又因为对一个量子比特进行两次W(a,b)操作满足如下等式
$$
\begin{equation}\mathsf W(a_1,b_1)\mathsf W(a_2,b_2)=(-1)^{b_1a_2}\mathsf W(a_1+a_2,b_1+b_2).\tag{4}\end{equation}
$$
因此，Alice和Bob分别对$\mathcal{A}_1$*和*$\mathcal{A}2$进行$W(a,b)$和$W(c,d)$操作，等价于Alice对$\mathcal{A}_1$分别进行了W(a,b)和$(-1)^{cd}W(c,d)$操作，即
$$
\begin{equation}(-1)^{cd}W(a,b)W(c,d)=(-1)^{bd}W(a+c,b+d).\tag{5}\end{equation}
$$
这里的$(-1)^{bd}W(a+c,b+d)$可以看成是$W(a+c,b+d)$操作，正负可以理解为只是相位不同，对结果不会产生影响。从式$\eqref{1}$中也可以看出，两个符号会抵消掉，所以$(e,f)$就是$(a+c,b+d)$，整个传输过程仅需要两个量子比特。

具体过程如图1所示

![图1 two-sum方案示意图[^2]](https://github.com/maihm6/Picture/blob/main/Blog/two-sum.png?raw=true)


## 举例分析

假设Alice要发送的信息为$(a,b)=(0,1)$，Bob需要发送的数据为$(c,d)=(1,1)$，量子系统的初始状态为$|\varphi\rangle=|\Phi\rangle=\frac{1}{\sqrt{2}}(|00\rangle+|11\rangle)$。

Pauli操作中的X操作实际上是将$|0\rangle$和$|1\rangle$位置互换，Z操作则是将$|1\rangle$的相位翻转。操作过程为：

1. Alice进行$W(a,b)$操作后，系统状态变为$|\varphi\rangle=\frac{1}{\sqrt{2}}(|00\rangle-|11\rangle)$。
2. Bob进行操作后，系统状态变为$|\varphi\rangle=-\frac{1}{\sqrt{2}}(|01\rangle+|10\rangle)$。

经过Alice和Bob的操作后，系统状态变为$|\varphi\rangle=-\frac{1}{\sqrt{2}}(|01\rangle+|10\rangle)$，这个结果与只有Alice进行$(-1)^{bd}W(a+c,b+d)=-W(1,0)$操作是一致的。Carol对接收到的量子系统进行测量后得到结果为$(e,f)=(1,0)=(a+c,b+d)$。因此，这个过程中只用了两个量子比特就将(a+c,b+d)给发送出去。

## 总结

Two-Sum Protocol利用了量子系统中的量子纠缠这一特性，将原先传统通信中需要4bits才能传输的内容用两个qubits就能传输完。这在求和通信网络中将提高通信效率，提升网络性能，对研究更加复杂的$\sum-QMAC$具有重要意义。

## 参考

[^1]:Song S, Hayashi M. Capacity of quantum symmetric private information retrieval with collusion of all but one of servers[J]. IEEE Journal on Selected Areas in Information Theory, 2021, 2(1): 380-390.
[^2]:Allaix M, Lu Y, Yao Y, et al. N-Sum Box: An Abstraction for Linear Computation over Many-to-one Quantum Networks[J]. arXiv preprint arXiv:2304.07561, 2023.
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>量子通信</tag>
        <tag>信息论与编码</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo+Next搭建个人博客</title>
    <url>/2023/03/03/Hexo_Next/</url>
    <content><![CDATA[
待补充

<!-- more -->

待补充
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>archives</title>
    <url>/archives/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>友链页面</title>
    <url>/links/index.html</url>
    <content><![CDATA[


{% linkgrid %}
吕金昂的通信小屋 | https://lvjang.cn | 欢迎来到小屋！这里将分享一些通信专业的知识、资源和站主的日常。| https://lvjang.cn/wp-content/uploads/2023/03/lvjang-主LOGO-600x600-1.jpg

{% endlinkgrid %}

----

<div style="text-align:center;">
   <span class="with-love" id="animate1"> <i class="fa fa-heart"></i> </span>发邮件添加友链<span class="with-love" id="animate2"> <i class="fa fa-heart"></i> </span> 
</div>
<center><font color='gray' size='2'>maihm6@163.com</font></center>


-----

{% note success %}

## 友链申请要求

1. 内容持续更新且可以稳定访问；
2. 页面整洁无广告；

{% endnote %}

{% note info no-icon %}

## 友链格式

- 网站名称：喜欢紫霞
- 网站地址：https://maihm6.com
- 网站描述：唯有热爱可抵岁月漫长。
- 网站标志：https://maihm6.com/images/apple-touch-icon-next.png

{% endnote %}
]]></content>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/about/index.html</url>
    <content><![CDATA[
更新于 2023-07-18 10:43

你好，我是 Huaming，下面是关于我的一些介绍：

- 一名准研究生，平时喜欢唱唱歌、打打篮球和健健身。

下面是关于这篇博客的一些介绍：

- 目前的想法是用来存放我的学习笔记，致力于打造属于自己的知识库。
- 除此之外，还会分享一些日常生活的感悟和瞎捣鼓的“技术”。

## 网络分身

如果你想要网络上的其他平台找到我，有下面这些方式：👇

<table style="text-align:center">
  <tr>
    <th width=50%>平台</th>
    <th>账号</th>
  </tr>
  <tr>
    <td>常用邮箱📫</td>
    <td><a href="mailto:maihm6@163.com">maihm6@163.com</a></td>
  </tr>
  <tr>
    <td>Github💻</td>
    <td><a hrel='https://github.com.maihm6'>maihm6</a></td>
  </tr>
</table>
]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
</search>
